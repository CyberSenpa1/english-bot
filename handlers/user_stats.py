from aiogram import Router, types, F
from db.core import async_session
from db.models import user_statistics
from keyboards.user_kb import start_kb
from db.models import answer_logs, words
from sqlalchemy import select
from db.requests import get_problem_words
from datetime import datetime
from sqlalchemy import func
from aiogram.utils.markdown import hbold, hitalic
import logging



logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    async with async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_query = await session.execute(
                select(
                    user_statistics.c.learned_words,
                    user_statistics.c.total_words,
                    user_statistics.c.accuracy,
                    user_statistics.c.streak,
                    user_statistics.c.last_active,
                    func.coalesce(user_statistics.c.total_correct, 0).label("total_correct"),
                    func.coalesce(user_statistics.c.total_wrong, 0).label("total_wrong")
                )
                .where(user_statistics.c.user_id == message.from_user.id)
            )
            stats = stats_query.mappings().first()
            
            if not stats:
                await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ!")
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞ (—Ç–æ–ø-5)
            problem_words = await get_problem_words(message.from_user.id, limit=5)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            recent_activity = await session.execute(
                select(
                    answer_logs.c.timestamp,
                    answer_logs.c.is_correct,
                    words.c.english
                )
                .join(words, words.c.id == answer_logs.c.word_id)
                .where(answer_logs.c.user_id == message.from_user.id)
                .order_by(answer_logs.c.timestamp.desc())
                .limit(3)
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = [
                hbold("üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                "",
                f"üéØ {hitalic('–í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤:')} {stats.learned_words}/{stats.total_words}",
                f"üìà {hitalic('–¢–æ—á–Ω–æ—Å—Ç—å:')} {stats.accuracy*100:.1f}% ({stats.total_correct}/{stats.total_correct + stats.total_wrong})",
                f"üî• {hitalic('–°–µ—Ä–∏—è –¥–Ω–µ–π:')} {stats.streak}",
                f"üîÑ {hitalic('–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:')} {stats.last_active.strftime('%d.%m.%Y %H:%M')}",
                "",
                hbold("‚ö†Ô∏è –°–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞:")
            ]
            
            if problem_words:
                for word in problem_words:
                    text.append(f"- {word['english']} ({word['wrong_attempts']} –æ—à–∏–±–æ–∫)")
            else:
                text.append("–ü–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤ - –æ—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
            
            text.extend(["", hbold("‚è± –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã:")])
            
            for activity in recent_activity:
                status = "‚úÖ" if activity.is_correct else "‚ùå"
                text.append(f"{status} {activity.english} - {activity.timestamp.strftime('%H:%M')}")
            
            await message.answer("\n".join(text), parse_mode="HTML", reply_markup=start_kb)
            
        except Exception as e:
            logger.error(f"Error getting stats: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=start_kb
            )